name: CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpw
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: testpw

      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: JDK 21 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: 빌드 권한 부여
        working-directory: ./backend
        run: chmod +x ./gradlew
        shell: bash

      - name: 빌드 및 테스트
        working-directory: ./backend
        run: ./gradlew build

      - name: 도커 허브 로그인
        run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 도커 이미지 빌드 및 Push
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ github.ref_name }}"
          
          docker build -t ${IMAGE_NAME}:${GITHUB_SHA::7} -t ${IMAGE_NAME}:latest .
          docker push ${IMAGE_NAME}:${GITHUB_SHA::7}
          docker push ${IMAGE_NAME}:latest

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-and-push
#
#    steps:
#      - name: SSH 연결을 통한 EC2 배포
#        uses: appleboy/ssh-action@v0.1.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          port: 22
#          script: |
#            cd somemore
#            sudo ./deploy.sh
