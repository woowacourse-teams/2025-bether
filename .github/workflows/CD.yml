name: CD Pipeline

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ github.ref_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpw
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: testpw
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Grant execute to Gradle
        working-directory: ./backend
        run: chmod +x ./gradlew

      - name: Build & Test
        working-directory: ./backend
        run: ./gradlew build

      - name: Docker Hub Login
        run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" \
          | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Docker Image
        working-directory: ./backend
        run: |
          docker build \
            -t ${IMAGE_NAME}:${GITHUB_SHA::7} \
            -t ${IMAGE_NAME}:latest .
          docker push ${IMAGE_NAME}:${GITHUB_SHA::7}
          docker push ${IMAGE_NAME}:latest

  deploy:
    runs-on: self-hosted
    needs: build-and-push

    steps:
      - name: Pull Docker Image
        run: docker pull ${IMAGE_NAME}:latest

      - name: Stop existing container (if any)
        run: docker stop ${{ secrets.DOCKER_DEV_CONTAINER_NAME }} || true

      - name: Remove existing container (if any)
        run: docker rm ${{ secrets.DOCKER_DEV_CONTAINER_NAME }} || true

      - name: Run new container
        run: |
          docker run -d \
            --name ${{ secrets.DOCKER_DEV_CONTAINER_NAME }} \
            -p 8080:8080 \
            ${IMAGE_NAME}:latest
